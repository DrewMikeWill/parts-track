using PartsTrack.Application.DTOs;
using PartsTrack.Domain.Entities;
using PartsTrack.Domain.Services;
using PartsTrack.Domain.Catalogs;
using System.Collections.Generic;

namespace PartsTrack.Application
{
    public class InventoryUseCases
    {
        private readonly InventoryService _inventoryService;
        private readonly IPartCatalog _partCatalog;

        public InventoryUseCases(InventoryService inventoryService, IPartCatalog partCatalog)
        {
            _inventoryService = inventoryService;
            _partCatalog = partCatalog;
        }

        // Method to add a new part to inventory
        public void AddPart(CreatePartDTO createPartDTO)
        {
            var part = new Part(
                partId: 0, // Assuming PartId is auto-generated by the database
                name: createPartDTO.Name,
                description: createPartDTO.Description,
                price: createPartDTO.Price,
                stockQuantity: 0 // Initial quantity set to 0
            );
            _partCatalog.Save(part);
        }

        // Method to update the stock of an existing part
        public void UpdatePartStock(int partId, int quantity)
        {
            var part = _partCatalog.GetById(partId);
            if (part != null)
            {
                part.UpdateStock(quantity);
                _partCatalog.Update(part);
            }
            else
            {
                throw new KeyNotFoundException($"Part with ID {partId} not found.");
            }
        }

        // Method to get a part by ID and return it as a DTO
        public PartDTO GetPartById(int partId)
        {
            var part = _partCatalog.GetById(partId);
            if (part == null)
            {
                throw new KeyNotFoundException($"Part with ID {partId} not found.");
            }

            return new PartDTO(
                partId: part.PartId,
                name: part.Name,
                description: part.Description,
                price: part.Price,
                stockQuantity: part.StockQuantity
            );
        }

        // Method to list all parts as DTOs
        public List<PartDTO> GetAllParts()
        {
            var parts = _partCatalog.GetAll();
            var partDTOs = new List<PartDTO>();

            foreach (var part in parts)
            {
                partDTOs.Add(new PartDTO(
                    partId: part.PartId,
                    name: part.Name,
                    description: part.Description,
                    price: part.Price,
                    stockQuantity: part.StockQuantity
                ));
            }

            return partDTOs;
        }

        // Method to get the inventory information of a part in a specific warehouse
        public InventoryDTO GetInventoryInfo(int partId, int warehouseId)
        {
            var inventory = _inventoryService.GetInventory(partId, warehouseId);
            if (inventory == null)
            {
                throw new KeyNotFoundException($"Inventory entry not found for Part ID {partId} in Warehouse ID {warehouseId}.");
            }

            return new InventoryDTO(
                inventoryId: inventory.InventoryId,
                partId: inventory.PartId,
                warehouseId: inventory.WarehouseId,
                quantity: inventory.Quantity
            );
        }
    }
}
